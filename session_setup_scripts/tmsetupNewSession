#!/usr/bin/bash
#  ---------------------------------------------------------------
# | Set up a quick & easy REPL using Tmux, Nvim, vim-tmux-runner |
# --------------------------------------<robaylard@gmail.com>----
# shellcheck source=/dev/null

# TODO $1 input for EDIT_FILE and use that if exists otherwise go to
#   prompt_user for entry. Add bash completion for this.

# TMUX_TEMPLATE_FILE="session_setup_scripts/tmux_template.sh"
TMUX_TEMPLATE_FILE="tmux_template.sh"

# Import some ui decorations (ui_button_printf & border_line)
# Ansi color file is also imported with this source
ui_decoration() {
  source "../ui_components/ui_components.sh"
  # source "ui_components/ui_components.sh"
  border_line 50
  ui_button_printf "TMUX-Nvim-Session-Maker"
  printf "\n"
}

# parameter: string argument
prompt_heading() {
  printf "${bold}${purple}%s${normal}\n" "$1"
}

# Returns user input variable
# parameters:
#   1. inserts placeholder text for '-i'
#   2. prompt string
#   3. enter a variable name
# -i insert text at beginning of prompt, -r not sure why, -n 1 Hotkey,
# -e gives readline file completion in prompt, -p prompt \
# need the " " with the -p otherwise it wont show the input arrow thingy
prompt_user() {
  read -i "$1" -r -e -p "$2" "$3"
}

# Returns global EDIT_FILE variable
# Validates variable by testing if directory path exists.
# Use tab completion when prompted
# For both conditions to be true to exit out of while loop...
#   EDIT_FILE Directory path MUST exist AND
#   EDIT_FILE must be a file name and NOT a directory name
get_edit_file() {
  prompt_heading "Enter a File to Edit:"
  while true; do
    prompt_user "$HOME/coding-practice/" " " EDIT_FILE
    if [[ -d "$(dirname "$EDIT_FILE")" ]] && [[ ! -d $EDIT_FILE ]]; then
      break
    fi
  done
}

# Use the EDIT_FILE variable to build & Return:
#   DIRECTORY variable
#   SESSION_NAME variable
#   SESSION_FILE_NAME variable
build_session_name_variable() {
  DIRECTORY="$(dirname "$EDIT_FILE")"
  local file_name
  local dir_name
  file_name=$(basename "${EDIT_FILE%.*}")
  dir_name="$(basename "$DIRECTORY")"
  SESSION_NAME="${dir_name}_${file_name}"
  SESSION_FILE_NAME="../session_names/tm${SESSION_NAME}"
}

# Returns a tmux session (calls one of the 3 functions below)
#   attach_to_existing_session_file or...
#   build_custom_session or...
#   build_repl_session
get_tmux_session() {
  if [[ -f "${SESSION_FILE_NAME}" ]]; then
    attach_to_existing_session_file
  else
    prompt_user_to_save_session_file
  fi
}

attach_to_existing_session_file() {
  border_line
  printf "The session_file${bold}${italic}${green} %s ${normal}already exists\n" \
    "$(basename "$SESSION_FILE_NAME")"
  source "$SESSION_FILE_NAME"
}

build_custom_session() {
  append_text
  nvim -c "norm 4G20| <cr>" "$SESSION_FILE_NAME"
  border_line
  source "$SESSION_FILE_NAME"
}

build_repl_session() {
  border_line
  source "$TMUX_TEMPLATE_FILE"
}

# Called by the build_custom_session function
#   Builds and returns a new executable file used to start a tmux session
#   Not sure if its ok to do chmod inside script. Probably bad.
append_text() {
  local append_lines=(
    "#!/usr/bin/bash"
    "EDIT_FILE=\"$EDIT_FILE\""
    "DIRECTORY=\"$DIRECTORY\""
    "SESSION_NAME=\"$SESSION_NAME\""
    "$(cat "$TMUX_TEMPLATE_FILE")"
  )
  for line in "${append_lines[@]}"; do
    printf "%s\n" "$line" >>"$SESSION_FILE_NAME"
  done
  chmod +x "$SESSION_FILE_NAME"
}

prompt_user_to_save_session_file() {
  printf "Edit and Save Custom Session:${bold}${italic}${green} %s${normal}\n" \
    "$(basename "$SESSION_FILE_NAME")"
  while true; do
    read -n1 -s -r
    case "${REPLY}" in
    [yY])
      printf "${italic}Session File ${bold}${underline}${blue}%s${normal}\n" "Saved"
      build_custom_session
      break
      ;;
    [nN])
      printf "${italic}REPL ${bold}${underline}${blue}%s${normal}\n" "Session"
      build_repl_session
      break
      ;;
    *) echo "enter y or n" ;;
    esac
  done
}

# Need this for using relative paths to work
get_cwd_for_relative_paths() {
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
  cd "$SCRIPT_DIR" || exit
}

main() {
  get_cwd_for_relative_paths
  ui_decoration
  get_edit_file
  build_session_name_variable
  get_tmux_session
}
main
